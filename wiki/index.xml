<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wikis on</title><link>https://booiris.space/wiki/</link><description>Recent content in Wikis on</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 09 Oct 2023 14:02:07 +0000</lastBuildDate><atom:link href="https://booiris.space/wiki/index.xml" rel="self" type="application/rss+xml"/><item><title>698. Partition to K Equal Sum Subsets</title><link>https://booiris.space/wiki/leetcode/698.-partition-to-k-equal-sum-subsets/</link><pubDate>Mon, 09 Oct 2023 14:02:07 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/698.-partition-to-k-equal-sum-subsets/</guid><description/></item><item><title>目录</title><link>https://booiris.space/wiki/rust_code/</link><pubDate>Mon, 24 Jul 2023 13:27:31 +0000</pubDate><guid>https://booiris.space/wiki/rust_code/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;a href="rust%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%281%29%20%E6%A6%82%E8%BF%B0.md">rust 源码分析 (1) 概述&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="rust%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%282%29-core-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9D%97.md">rust 源码分析 (2)-core-内存模块&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="rust%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%283%29-std-alloc%E6%A8%A1%E5%9D%97.md">rust 源码分析 (3)-std-alloc模块&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="rust%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%284%29-std-backtrace%E6%A8%A1%E5%9D%97.md">rust 源码分析 (4)-std-backtrace模块&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="rust%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%285%29-std-collection.md">rust 源码分析 (5)-std-collection&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="rust%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%20%286%29-std-collection-HashMap.md">rust 源码分析 (6)-std-collection-HashMap&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>1157-Online Majority Element In Subarray</title><link>https://booiris.space/wiki/leetcode/1157-online-majority-element-in-subarray/</link><pubDate>Sun, 16 Apr 2023 14:41:57 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1157-online-majority-element-in-subarray/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>设计一个数据结构，有效地找到给定子数组的 &lt;strong>多数元素&lt;/strong> 。&lt;/p>
&lt;p>子数组的 &lt;strong>多数元素&lt;/strong> 是在子数组中出现 &lt;code>threshold&lt;/code> 次数或次数以上的元素。&lt;/p>
&lt;p>实现 &lt;code>MajorityChecker&lt;/code> 类:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>MajorityChecker(int[] arr)&lt;/code> 会用给定的数组 &lt;code>arr&lt;/code> 对 &lt;code>MajorityChecker&lt;/code> 初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int query(int left, int right, int threshold)&lt;/code> 返回子数组中的元素  &lt;code>arr[left…right]&lt;/code> 至少出现 &lt;code>threshold&lt;/code> 次数，如果不存在这样的元素则返回 &lt;code>-1&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="题解">题解&lt;/h2>
&lt;ol>
&lt;li>线段树+摩尔投票&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#![allow(dead_code, unused_imports, unused_macros)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::&lt;span style="color:#cf222e">f32&lt;/span>::consts::E&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::AddAssign&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[derive(Clone, Copy)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Node&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>num: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>cnt: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Node&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">#[inline]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">new&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>num: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#1f2328">Self&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>Node&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff"> &lt;/span>num&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>AddAssign&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>Node&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">add_assign&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs: &lt;span style="color:#1f2328">Self&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>num&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">==&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs&lt;span style="color:#1f2328">.&lt;/span>num&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">else&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-=&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">else&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>num&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs&lt;span style="color:#1f2328">.&lt;/span>num&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>rhs&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>cnt&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">SegTree&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>tree: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>Node&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>val: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>len: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>SegTree&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">#[inline]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">new&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>arr: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#1f2328">Self&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>len&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>arr&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>SegTree&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>tree: &lt;span style="color:#1f2328">vec&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>Node::new&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>len&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">4&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>val: &lt;span style="color:#1f2328">arr&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>len&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">build&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>id: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>l: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>r: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>l&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">==&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">].&lt;/span>num&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>val&lt;span style="color:#1f2328">[&lt;/span>l&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">].&lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">return&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>mid&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>l&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">/&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>build&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>l&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>mid&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>build&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>mid&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">query&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>id: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>l: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>r: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ql: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>qr: &lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ans: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>Node&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>l&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>qr&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">||&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>ql&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">return&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>ql&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>l&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>qr&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>ans&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>tree&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">return&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>mid&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>l&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">/&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>query&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>l&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>mid&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ql&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>qr&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ans&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>query&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>mid&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>r&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ql&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>qr&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ans&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">MajorityChecker&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>seg_tree: &lt;span style="color:#1f2328">SegTree&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>loc: &lt;span style="color:#1f2328">HashMap&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#0a3069">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> * `&amp;amp;self` means the method takes an immutable reference.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> * If you need a mutable reference, change it to `&amp;amp;mut self` instead.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> */&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>MajorityChecker&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">new&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>arr: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#1f2328">Self&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>loc&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>i&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>v&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>arr&lt;span style="color:#1f2328">.&lt;/span>iter&lt;span style="color:#1f2328">().&lt;/span>enumerate&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>loc&lt;span style="color:#1f2328">.&lt;/span>entry&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>v&lt;span style="color:#1f2328">).&lt;/span>or_insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[]).&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>i&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>seg_tree&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>SegTree::new&lt;span style="color:#1f2328">(&lt;/span>arr&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>seg_tree&lt;span style="color:#1f2328">.&lt;/span>build&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>seg_tree&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>MajorityChecker&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff"> &lt;/span>seg_tree&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>loc&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">query&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>left: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>right: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>threshold: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#cf222e">i32&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>ans&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>Node::new&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>seg_tree&lt;span style="color:#1f2328">.&lt;/span>query&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>seg_tree&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>left&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>right&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>ans&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6a737d">self&lt;/span>&lt;span style="color:#1f2328">.&lt;/span>loc&lt;span style="color:#1f2328">.&lt;/span>get&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>ans&lt;span style="color:#1f2328">.&lt;/span>num&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>is_none&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">return&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>unwrap&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>partition_point&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>right&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>partition_point&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>left&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>threshold&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>ans&lt;span style="color:#1f2328">.&lt;/span>num&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">else&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#0a3069">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> * Your MajorityChecker object will be instantiated and called as such:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> * let obj = MajorityChecker::new(arr);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> * let ret_1: i32 = obj.query(left, right, threshold);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0a3069"> */&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>arr&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>obj&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>MajorityChecker::new&lt;span style="color:#1f2328">(&lt;/span>arr&lt;span style="color:#1f2328">.&lt;/span>into&lt;span style="color:#1f2328">());&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>ini&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">5&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">4&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">]];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>ini&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>obj&lt;span style="color:#1f2328">.&lt;/span>query&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">]));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>树套树&lt;/li>
&lt;/ol></description></item><item><title>1.8 内存分配</title><link>https://booiris.space/wiki/redis/1.8-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</link><pubDate>Fri, 07 Oct 2022 16:04:18 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.8-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</guid><description>&lt;h2 id="todo">TODO&lt;/h2></description></item><item><title>1.7 对象</title><link>https://booiris.space/wiki/redis/1.7-%E5%AF%B9%E8%B1%A1/</link><pubDate>Fri, 07 Oct 2022 16:04:06 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.7-%E5%AF%B9%E8%B1%A1/</guid><description>&lt;h2 id="todo">TODO&lt;/h2></description></item><item><title>1.6 压缩列表</title><link>https://booiris.space/wiki/redis/1.6-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</link><pubDate>Fri, 07 Oct 2022 16:03:18 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.6-%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8/</guid><description>&lt;h2 id="todo">TODO&lt;/h2></description></item><item><title>1.5 整数集合</title><link>https://booiris.space/wiki/redis/1.5-%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</link><pubDate>Fri, 07 Oct 2022 16:02:03 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.5-%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88/</guid><description>&lt;h2 id="todo">TODO&lt;/h2></description></item><item><title>1.4 跳表</title><link>https://booiris.space/wiki/redis/1.4-%E8%B7%B3%E8%A1%A8/</link><pubDate>Fri, 07 Oct 2022 16:01:44 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.4-%E8%B7%B3%E8%A1%A8/</guid><description>&lt;h2 id="todo">TODO&lt;/h2></description></item><item><title>1.3 字典</title><link>https://booiris.space/wiki/redis/1.3-%E5%AD%97%E5%85%B8/</link><pubDate>Fri, 07 Oct 2022 16:01:18 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.3-%E5%AD%97%E5%85%B8/</guid><description>&lt;h2 id="todo">TODO&lt;/h2></description></item><item><title>面试题 17.19. Missing Two LCCI</title><link>https://booiris.space/wiki/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%98-17.19.-missing-two-lcci/</link><pubDate>Mon, 26 Sep 2022 22:42:10 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%98-17.19.-missing-two-lcci/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>You are given an array with all the numbers from 1 to N appearing exactly once, except for two number that is missing. How can you find the missing number in O(N) time and 0(1) space?&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="原地哈希">原地哈希&lt;/h3>
&lt;h3 id="数学">数学&lt;/h3>
&lt;h3 id="位运算">位运算&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#![allow(dead_code, unused_imports, unused_macros)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">// impl Solution {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// pub fn missing_two(mut nums: Vec&amp;lt;i32&amp;gt;) -&amp;gt; Vec&amp;lt;i32&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// nums.push(-1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// nums.push(-1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let mut res = vec![];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// for i in 0..nums.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// while nums[i] != -1 &amp;amp;&amp;amp; nums[i] - 1 != i as i32 {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let temp = nums[i] as usize - 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// nums.swap(i, temp);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// for i in 0..nums.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// if nums[i] == -1 {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// res.push(i as i32 + 1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// res
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">// impl Solution {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// pub fn missing_two(nums: Vec&amp;lt;i32&amp;gt;) -&amp;gt; Vec&amp;lt;i32&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let sum = nums.iter().sum::&amp;lt;i32&amp;gt;();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let n = nums.len() as i32 + 2;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let sum_two = n * (n + 1) / 2 - sum;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let key = sum_two / 2;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let sum_low = nums.iter().filter(|&amp;amp;&amp;amp;x| x &amp;lt;= key).sum::&amp;lt;i32&amp;gt;();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let one = key * (key + 1) / 2 - sum_low;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// // println!(&amp;#34;{} {} {}&amp;#34;, sum_two, sum_low, sum);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// vec![one, sum_two - one]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">missing_two&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>nums: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>nums&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#0550ae">..=&lt;/span>n&lt;span style="color:#1f2328">).&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>diff&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>key&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#0550ae">..=&lt;/span>n&lt;span style="color:#1f2328">).&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>diff&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">!=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">});&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>diff&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">!=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">});&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>one&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^&lt;/span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{:?}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution::missing_two&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>开始</title><link>https://booiris.space/wiki/redis/%E5%BC%80%E5%A7%8B/</link><pubDate>Sun, 25 Sep 2022 23:57:53 +0000</pubDate><guid>https://booiris.space/wiki/redis/%E5%BC%80%E5%A7%8B/</guid><description>&lt;blockquote>
&lt;p>参考 《Redis设计与实现》&lt;/p>&lt;/blockquote>
&lt;h2 id="redis-70-代码结构">redis 7.0 代码结构&lt;/h2></description></item><item><title>1.1 SDS(动态字符串)</title><link>https://booiris.space/wiki/redis/1.1-sds%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</link><pubDate>Sat, 24 Sep 2022 21:14:26 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.1-sds%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid><description>&lt;h2 id="sds介绍">SDS介绍&lt;/h2>
&lt;p>Redis自己构建了一种名为简单动态字符串(simple dynamic string, SDS) 的抽象类型，并将其作为Redis的默认字符串表示。&lt;/p>
&lt;h2 id="sds定义">SDS定义&lt;/h2>
&lt;p>在 Redis7.0 中 定义的代码位于 &lt;code>src/sds.h&lt;/code> 中，定义如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/* Note: sdshdr5 is never used, we just access the flags byte directly.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * However is here to document the layout of type 5 SDS strings. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#6639ba">__attribute__&lt;/span> &lt;span style="color:#1f2328">((&lt;/span>__packed__&lt;span style="color:#1f2328">))&lt;/span> sdshdr5 &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">unsigned&lt;/span> &lt;span style="color:#cf222e">char&lt;/span> flags&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* 3 lsb of type, and 5 msb of string length */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">char&lt;/span> buf&lt;span style="color:#1f2328">[];&lt;/span> &lt;span style="color:#57606a">// 柔性数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#6639ba">__attribute__&lt;/span> &lt;span style="color:#1f2328">((&lt;/span>__packed__&lt;span style="color:#1f2328">))&lt;/span> sdshdr8 &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint8_t&lt;/span> len&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* used */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint8_t&lt;/span> alloc&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* excluding the header and null terminator */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">unsigned&lt;/span> &lt;span style="color:#cf222e">char&lt;/span> flags&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* 3 lsb of type, 5 unused bits */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">char&lt;/span> buf&lt;span style="color:#1f2328">[];&lt;/span> &lt;span style="color:#57606a">// 柔性数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#6639ba">__attribute__&lt;/span> &lt;span style="color:#1f2328">((&lt;/span>__packed__&lt;span style="color:#1f2328">))&lt;/span> sdshdr16 &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint16_t&lt;/span> len&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* used */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint16_t&lt;/span> alloc&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* excluding the header and null terminator */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">unsigned&lt;/span> &lt;span style="color:#cf222e">char&lt;/span> flags&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* 3 lsb of type, 5 unused bits */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">char&lt;/span> buf&lt;span style="color:#1f2328">[];&lt;/span> &lt;span style="color:#57606a">// 柔性数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#6639ba">__attribute__&lt;/span> &lt;span style="color:#1f2328">((&lt;/span>__packed__&lt;span style="color:#1f2328">))&lt;/span> sdshdr32 &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint32_t&lt;/span> len&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* used */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint32_t&lt;/span> alloc&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* excluding the header and null terminator */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">unsigned&lt;/span> &lt;span style="color:#cf222e">char&lt;/span> flags&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* 3 lsb of type, 5 unused bits */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">char&lt;/span> buf&lt;span style="color:#1f2328">[];&lt;/span> &lt;span style="color:#57606a">// 柔性数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#6639ba">__attribute__&lt;/span> &lt;span style="color:#1f2328">((&lt;/span>__packed__&lt;span style="color:#1f2328">))&lt;/span> sdshdr64 &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint64_t&lt;/span> len&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* used */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">uint64_t&lt;/span> alloc&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* excluding the header and null terminator */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">unsigned&lt;/span> &lt;span style="color:#cf222e">char&lt;/span> flags&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">/* 3 lsb of type, 5 unused bits */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">char&lt;/span> buf&lt;span style="color:#1f2328">[];&lt;/span> &lt;span style="color:#57606a">// 柔性数组
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据字符串长度不同，用来存放它的sds类型也不同。&lt;/p></description></item><item><title>1.2 链表</title><link>https://booiris.space/wiki/redis/1.2-%E9%93%BE%E8%A1%A8/</link><pubDate>Sat, 24 Sep 2022 21:14:26 +0000</pubDate><guid>https://booiris.space/wiki/redis/1.2-%E9%93%BE%E8%A1%A8/</guid><description>&lt;h2 id="todo">TODO&lt;/h2>
&lt;p>1&lt;/p></description></item><item><title>目录</title><link>https://booiris.space/wiki/redis/catalog/</link><pubDate>Sun, 18 Sep 2022 22:09:05 +0000</pubDate><guid>https://booiris.space/wiki/redis/catalog/</guid><description>&lt;blockquote>
&lt;p>参考 《Redis设计与实现》&lt;/p>&lt;/blockquote>
&lt;h2 id="第一章数据对象">第一章：数据对象&lt;/h2>
&lt;h3 id="11-sds动态字符串">1.1 SDS(动态字符串)&lt;/h3>
&lt;h3 id="12-链表">1.2 链表&lt;/h3>
&lt;h3 id="13-字典">1.3 字典&lt;/h3>
&lt;h3 id="14-跳表">1.4 跳表&lt;/h3>
&lt;h3 id="15-整数集合">1.5 整数集合&lt;/h3>
&lt;h3 id="16-压缩列表">1.6 压缩列表&lt;/h3>
&lt;h3 id="17-对象">1.7 对象&lt;/h3>
&lt;h3 id="18-内存分配">1.8 内存分配&lt;/h3>
&lt;h2 id="第二章-rdb-持久化">第二章： RDB 持久化&lt;/h2></description></item><item><title>827. Making A Large Island</title><link>https://booiris.space/wiki/leetcode/827.-making-a-large-island/</link><pubDate>Sun, 18 Sep 2022 21:57:09 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/827.-making-a-large-island/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给你一个大小为&lt;code>n x n&lt;/code>二进制矩阵 &lt;code>grid&lt;/code> 。&lt;strong>最多&lt;/strong>只能将一格&lt;code>0&lt;/code>变成&lt;code>1&lt;/code> 。&lt;/p>
&lt;p>返回执行此操作后，grid 中最大的岛屿面积是多少？&lt;/p>
&lt;p>岛屿由一组上、下、左、右四个方向相连的&lt;code> 1 &lt;/code>形成。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>首先 dfs 染色，得到每个颜色的格子数量。然后枚举整个地图，对于每一个点，遍历它的上下左右的点所在的颜色区域，最后求和得到相连的区域大小。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#![allow(dead_code, unused_imports, unused_macros)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">const&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">DIR&lt;/span>: &lt;span style="color:#1f2328">[[&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">4&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">dfs&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>color: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>vis: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">bool&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>cnt: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>HashMap&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>grid: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>p: &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nowc: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>color&lt;span style="color:#1f2328">[&lt;/span>p&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">][&lt;/span>p&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>nowc&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>vis&lt;span style="color:#1f2328">[&lt;/span>p&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">][&lt;/span>p&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">true&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#1f2328">.&lt;/span>entry&lt;span style="color:#1f2328">(&lt;/span>nowc&lt;span style="color:#1f2328">).&lt;/span>and_modify&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>c&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>c&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">).&lt;/span>or_insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">DIR&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>p&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>p&lt;span style="color:#1f2328">.&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">!&lt;/span>vis&lt;span style="color:#1f2328">[&lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">][&lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">[&lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">][&lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">==&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>dfs&lt;span style="color:#1f2328">(&lt;/span>color&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>vis&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#fff"> &lt;/span>nowc&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">largest_island&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>grid: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#cf222e">i32&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>HashMap::&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>color&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">].&lt;/span>len&lt;span style="color:#1f2328">()];&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>vis&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#cf222e">false&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">].&lt;/span>len&lt;span style="color:#1f2328">()];&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>i&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#0550ae">..&lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>j&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#0550ae">..&lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>j&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">==&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">!&lt;/span>vis&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>j&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>dfs&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>color&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>vis&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>grid&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>i&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>j&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>i&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#0550ae">..&lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>j&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#0550ae">..&lt;/span>grid&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>HashSet::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>d&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">DIR&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>i&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>d&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>j&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>d&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>color&lt;span style="color:#1f2328">[&lt;/span>nx&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">][&lt;/span>ny&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#1f2328">]);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>grid&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>j&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">==&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>cnt&lt;span style="color:#1f2328">.&lt;/span>get&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">).&lt;/span>unwrap&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>max&lt;span style="color:#1f2328">(&lt;/span>res&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>a&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution::largest_island&lt;span style="color:#1f2328">(&lt;/span>a&lt;span style="color:#1f2328">));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>857. Minimum Cost to Hire K Workers</title><link>https://booiris.space/wiki/leetcode/857.-minimum-cost-to-hire-k-workers/</link><pubDate>Sun, 11 Sep 2022 16:10:05 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/857.-minimum-cost-to-hire-k-workers/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>有 n 名工人。 给定两个数组 quality 和 wage ，其中，quality[i] 表示第 i 名工人的工作质量，其最低期望工资为 wage[i] 。&lt;/p>
&lt;p>现在我们想雇佣 k 名工人组成一个工资组。在雇佣 一组 k 名工人时，我们必须按照下述规则向他们支付工资：&lt;/p>
&lt;ol>
&lt;li>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。&lt;/li>
&lt;li>工资组中的每名工人至少应当得到他们的最低期望工资。&lt;/li>
&lt;/ol>
&lt;p>给定整数 k ，返回 组成满足上述条件的付费群体所需的最小金额 &lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#![allow(dead_code, unused_imports, unused_macros)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">mincost_to_hire_workers&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>quality: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>wage: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>k: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#cf222e">f64&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>quality&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">.&lt;/span>iter&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">.&lt;/span>zip&lt;span style="color:#1f2328">(&lt;/span>wage&lt;span style="color:#1f2328">.&lt;/span>iter&lt;span style="color:#1f2328">())&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">.&lt;/span>map&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>x&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>y&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>x&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>y&lt;span style="color:#1f2328">])&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">.&lt;/span>collect::&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>_&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>sort_unstable_by&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>y&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>y&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]).&lt;/span>cmp&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>y&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">])));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>q&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>BinaryHeap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>i&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#0550ae">..&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>k&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>res: &lt;span style="color:#cf222e">f64&lt;/span> &lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1000000000.0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>i&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>k&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">usize&lt;/span>&lt;span style="color:#0550ae">..&lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#1f2328">.&lt;/span>min&lt;span style="color:#1f2328">(&lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">f64&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">/&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">f64&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">f64&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">Some&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>peek&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>x&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>a&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">10&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">10&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>b&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">4&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">8&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">7&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution::mincost_to_hire_workers&lt;span style="color:#1f2328">(&lt;/span>a&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>b&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>646. Maximum Length of Pair Chain</title><link>https://booiris.space/wiki/leetcode/646.-maximum-length-of-pair-chain/</link><pubDate>Sat, 03 Sep 2022 22:44:50 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/646.-maximum-length-of-pair-chain/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给定一个数对集合，找出能够形成的最长数对链的长度。&lt;/p>
&lt;p>当且仅当 &lt;code>b &amp;lt; c&lt;/code> 时，数对&lt;code>(c, d)&lt;/code> 才可以跟在 &lt;code>(a, b)&lt;/code> 后面。我们用这种形式来构造一个数对链。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>类似最长上升子序列，创建一个数组维护每一个序列长度对应的最小末尾。对于二维数对的情况，可以先对其按第一个元素排序，然后对第二个元素进行dp。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#[allow(dead_code)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[allow(unused_imports)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">find_longest_chain&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>pairs: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#cf222e">i32&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>pairs&lt;span style="color:#1f2328">.&lt;/span>sort_unstable&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>pairs&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>s&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>e&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>index&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>partition_point&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>s&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>index&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>get_mut&lt;span style="color:#1f2328">(&lt;/span>index&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">match&lt;/span>&lt;span style="color:#fff"> &lt;/span>index&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">Some&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>min&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>x&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>e&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>_&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>e&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>temp&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">7&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">8&lt;/span>&lt;span style="color:#1f2328">],&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">4&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">5&lt;/span>&lt;span style="color:#1f2328">]];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution::find_longest_chain&lt;span style="color:#1f2328">(&lt;/span>temp&lt;span style="color:#1f2328">));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1302-Deepest Leaves Sum</title><link>https://booiris.space/wiki/leetcode/1302-deepest-leaves-sum/</link><pubDate>Wed, 17 Aug 2022 20:21:22 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1302-deepest-leaves-sum/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出一个二叉树，计算最深一层的节点和。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>dfs，如果当前的层数大于最大层数，则更新最大层数，并且重置节点和。当当前层数等于最大层数的时候，将当前节点值加入节点和。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#[allow(dead_code)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[allow(unused_imports)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">// Definition for a binary tree node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[derive(Debug, PartialEq, Eq)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">TreeNode&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>val: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>left: &lt;span style="color:#6639ba">Option&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>Rc&lt;span style="color:#0550ae">&amp;lt;&lt;/span>RefCell&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>right: &lt;span style="color:#6639ba">Option&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>Rc&lt;span style="color:#0550ae">&amp;lt;&lt;/span>RefCell&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>TreeNode&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">#[inline]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">new&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>val: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#1f2328">Self&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>TreeNode&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>val&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>left: &lt;span style="color:#6639ba">None&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>right: &lt;span style="color:#6639ba">None&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">dfs&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>now: &lt;span style="color:#6639ba">Option&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>Rc&lt;span style="color:#0550ae">&amp;lt;&lt;/span>RefCell&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>depth: &lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>maxdepth: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>key: &lt;span style="color:#cf222e">&amp;amp;&lt;/span>&lt;span style="color:#1f2328">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">Some&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">ref&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>depth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>maxdepth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>maxdepth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>depth&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>depth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">==&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>maxdepth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">.&lt;/span>borrow&lt;span style="color:#1f2328">().&lt;/span>val&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>dfs&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">.&lt;/span>borrow_mut&lt;span style="color:#1f2328">().&lt;/span>left&lt;span style="color:#1f2328">.&lt;/span>take&lt;span style="color:#1f2328">(),&lt;/span>&lt;span style="color:#fff"> &lt;/span>depth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>maxdepth&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>dfs&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">.&lt;/span>borrow_mut&lt;span style="color:#1f2328">().&lt;/span>right&lt;span style="color:#1f2328">.&lt;/span>take&lt;span style="color:#1f2328">(),&lt;/span>&lt;span style="color:#fff"> &lt;/span>depth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>maxdepth&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cell::RefCell&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::rc::Rc&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">deepest_leaves_sum&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>root: &lt;span style="color:#6639ba">Option&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>Rc&lt;span style="color:#0550ae">&amp;lt;&lt;/span>RefCell&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#cf222e">i32&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>maxdepth&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>dfs&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>maxdepth&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&amp;#34;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1403-Minimum Subsequence in Non-Increasing Order</title><link>https://booiris.space/wiki/leetcode/1403-minimum-subsequence-in-non-increasing-order/</link><pubDate>Fri, 05 Aug 2022 00:23:19 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1403-minimum-subsequence-in-non-increasing-order/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出一个数组，将数组分为两个部分，其中一个部分A和严格大于另一部分和，要求A部分尽可能短，如果先相同长度A的和尽可能大。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>从大到小排序数组，不断取出当前最大的数直到取出的数的和大于剩下的数的和。取出的数集即为答案。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#[allow(dead_code)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[allow(unused_imports)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">min_subsequence&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>sort_unstable&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>reverse&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>iter&lt;span style="color:#1f2328">().&lt;/span>sum&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[];&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">for&lt;/span>&lt;span style="color:#fff"> &lt;/span>num&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">in&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>iter&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>num&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">*&lt;/span>num&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>num&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>now&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>sum&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">break&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>res&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(test)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{:?}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution::min_subsequence&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">4&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">10&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">9&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">8&lt;/span>&lt;span style="color:#1f2328">]));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>513-Find Bottom Left Tree Value</title><link>https://booiris.space/wiki/leetcode/513-find-bottom-left-tree-value/</link><pubDate>Thu, 23 Jun 2022 00:10:14 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/513-find-bottom-left-tree-value/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>找到树中最左下的节点。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>层序遍历树，每次取每一层最左边的节点，最后的值即为最左下的节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Definition for a binary tree node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * struct TreeNode {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * int val;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *left;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *right;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> findBottomLeftValue&lt;span style="color:#1f2328">(&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>root&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode &lt;span style="color:#0550ae">*&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> len &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>len&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">auto&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>508-Most Frequent Subtree Sum</title><link>https://booiris.space/wiki/leetcode/508-most-frequent-subtree-sum/</link><pubDate>Sun, 19 Jun 2022 14:18:39 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/508-most-frequent-subtree-sum/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>求树中频率最高的子树和的数字。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>深度优先搜索树，返回当前子树和，然后更新子树和的频率，如果当前子树和大于最大频率，则更新答案。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Definition for a binary tree node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * struct TreeNode {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * int val;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *left;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *right;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode() : val(0), left(nullptr), right(nullptr) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">TreeNode&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>left&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>right&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">:&lt;/span> val&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">),&lt;/span> left&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">),&lt;/span> right&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> x&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">:&lt;/span> val&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">),&lt;/span> left&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">),&lt;/span> right&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> x&lt;span style="color:#1f2328">,&lt;/span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>left&lt;span style="color:#1f2328">,&lt;/span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>right&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">:&lt;/span> val&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">),&lt;/span> left&lt;span style="color:#1f2328">(&lt;/span>left&lt;span style="color:#1f2328">),&lt;/span> right&lt;span style="color:#1f2328">(&lt;/span>right&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> maxcnt &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unordered_map&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> mp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">dfs&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>now&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> l&lt;span style="color:#1f2328">,&lt;/span> r&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> l &lt;span style="color:#0550ae">=&lt;/span> dfs&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#0550ae">=&lt;/span> dfs&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> sum &lt;span style="color:#0550ae">=&lt;/span> now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>val &lt;span style="color:#0550ae">+&lt;/span> l &lt;span style="color:#0550ae">+&lt;/span> r&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mp&lt;span style="color:#1f2328">[&lt;/span>sum&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>mp&lt;span style="color:#1f2328">[&lt;/span>sum&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;gt;&lt;/span> maxcnt&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxcnt &lt;span style="color:#0550ae">=&lt;/span> mp&lt;span style="color:#1f2328">[&lt;/span>sum&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>clear&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>mp&lt;span style="color:#1f2328">[&lt;/span>sum&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> maxcnt&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>sum&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> sum&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> findFrequentTreeSum&lt;span style="color:#1f2328">(&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>root&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1089-Duplicate Zeros</title><link>https://booiris.space/wiki/leetcode/1089-duplicate-zeros/</link><pubDate>Fri, 17 Jun 2022 16:13:02 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1089-duplicate-zeros/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给你一个长度固定的整数数组 arr，请你将该数组中出现的每个零都复写一遍，并将其余的元素向右平移。&lt;/p>
&lt;p>注意：请不要在超过该数组长度的位置写入元素。&lt;/p>
&lt;p>要求：请对输入的数组 就地 进行上述修改，不要从函数返回任何东西，空间复杂度为 $O(1)$。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>使用双指针，通过维护两个双指针模拟栈。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">void&lt;/span> duplicateZeros&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>arr&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> top &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>top &lt;span style="color:#0550ae">&amp;lt;&lt;/span> arr&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>arr&lt;span style="color:#1f2328">[&lt;/span>now&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> top&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now &lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> top&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>arr&lt;span style="color:#1f2328">[&lt;/span>now&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>top &lt;span style="color:#0550ae">&amp;lt;&lt;/span> arr&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#1f2328">[&lt;/span>top&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#1f2328">[&lt;/span>top&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> arr&lt;span style="color:#1f2328">[&lt;/span>now&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>498-Diagonal Traverse</title><link>https://booiris.space/wiki/leetcode/498-diagonal-traverse/</link><pubDate>Tue, 14 Jun 2022 10:50:39 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/498-diagonal-traverse/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>按对角线遍历数组。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/booiris-cdn/img/498-Diagonal_Traverse.png" alt="">&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>只有两种方向，一种斜向上 x-1,y+1；一种斜向下 x+1,y-1。对于拐角处，有几种情况。&lt;/p>
&lt;ol>
&lt;li>在对角处改变方向，这时需要根据在左下角还是右上角的情况做出不同处理。&lt;/li>
&lt;li>在左边和上面改变方向，左边对应 y 小于 0 ，上面对应 x 小于 0 ，这时只需要将 x 或 y重置为0，然后改变方向。&lt;/li>
&lt;li>在右边和下面改变方向，右边对应 y 等于 m ，下边对应 x 等于 n，这是除了将 y 改变为 m-1 ，或将 x 改变为 n-1 ，还需要将对应 x 加 2或者 y 加 2。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> findDiagonalOrder&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>mat&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> n &lt;span style="color:#0550ae">=&lt;/span> mat&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> m &lt;span style="color:#0550ae">=&lt;/span> mat&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">].&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> nowx &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> nowy &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> m &lt;span style="color:#0550ae">*&lt;/span> n&lt;span style="color:#1f2328">;&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>mat&lt;span style="color:#1f2328">[&lt;/span>nowx&lt;span style="color:#1f2328">][&lt;/span>nowy&lt;span style="color:#1f2328">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowx &lt;span style="color:#0550ae">-=&lt;/span> dir&lt;span style="color:#1f2328">,&lt;/span> nowy &lt;span style="color:#0550ae">+=&lt;/span> dir&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nowx &lt;span style="color:#0550ae">&amp;lt;&lt;/span> &lt;span style="color:#0550ae">0&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> nowy &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> m&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowx &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowy &lt;span style="color:#0550ae">=&lt;/span> m &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#6639ba">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nowx &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> n &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> nowy &lt;span style="color:#0550ae">&amp;lt;&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowx &lt;span style="color:#0550ae">=&lt;/span> n &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowy &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#6639ba">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nowx &lt;span style="color:#0550ae">&amp;lt;&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowx &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#6639ba">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nowx &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> n&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowx &lt;span style="color:#0550ae">=&lt;/span> n &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowy &lt;span style="color:#0550ae">+=&lt;/span> &lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#6639ba">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nowy &lt;span style="color:#0550ae">&amp;lt;&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowy &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#6639ba">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nowy &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> m&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowy &lt;span style="color:#0550ae">=&lt;/span> m &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nowx &lt;span style="color:#0550ae">+=&lt;/span> &lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dir &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1051-Height Checker</title><link>https://booiris.space/wiki/leetcode/1051-height-checker/</link><pubDate>Mon, 13 Jun 2022 15:00:05 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1051-height-checker/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.&lt;/p>
&lt;p>You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).&lt;/p></description></item><item><title>890-Find and Replace Pattern</title><link>https://booiris.space/wiki/leetcode/890-find-and-replace-pattern/</link><pubDate>Sun, 12 Jun 2022 15:32:39 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/890-find-and-replace-pattern/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给定一组目标字符串和原字符串，规定一种变换，原字符串中所有相同的字母可以变换为另一种字母。限制为每种字母只能变换一种字母，不同的字母不能变换成相同的字母。如&amp;quot;abb&amp;quot;可以变换为&amp;quot;cdd&amp;quot;，不能变换成&amp;quot;cde&amp;quot;或&amp;quot;ccc&amp;quot;。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>遍历目标字符串中的所有字符，如果长度和原字符串不相等直接跳过，然后遍历原字符串，如果当前字符不存在映射，就对应到目标字符串对应位置的字符，如果存在映射但与当前对应位置字符不相等直接跳过，如果有多个字符对应同一个字符，跳过当前的目标字符串，将所有符合条件的目标字符串放入答案中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> findAndReplacePattern&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>words&lt;span style="color:#1f2328">,&lt;/span> string pattern&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> key&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">30&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">bool&lt;/span> vis&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">30&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#900;font-weight:bold">x&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> words&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> pattern&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset&lt;span style="color:#1f2328">(&lt;/span>key&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">sizeof&lt;/span> key&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset&lt;span style="color:#1f2328">(&lt;/span>vis&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">sizeof&lt;/span> vis&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">bool&lt;/span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> pattern&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>pattern&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0a3069">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>vis&lt;span style="color:#1f2328">[&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0a3069">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#1f2328">])&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">break&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vis&lt;span style="color:#1f2328">[&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0a3069">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#1f2328">[&lt;/span>pattern&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0a3069">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> x&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>key&lt;span style="color:#1f2328">[&lt;/span>pattern&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0a3069">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> x&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">])&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">break&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>flag&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>926-Flip String to Monotone Increasing</title><link>https://booiris.space/wiki/leetcode/926-flip-string-to-monotone-increasing/</link><pubDate>Sat, 11 Jun 2022 14:27:11 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/926-flip-string-to-monotone-increasing/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给定一串01串，能够对其每一位进行翻转，即0变1，1变0。要求最终得到一个不下降的01串，例如000111111，求最小翻转次数。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>使用前缀和统计每一位左边0和1，和右边0和1的个数，枚举每一位 i 作为0到1上升的边缘。i 左边全为0，右边全为1，所以翻转次数为 i 左边1的个数加上 i 右边0的个数，最后求出最小值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> key0&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">100005&lt;/span>&lt;span style="color:#1f2328">],&lt;/span> key1&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">100005&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">minFlipsMonoIncr&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>string s&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> cnt0 &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> index &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#900;font-weight:bold">x&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> s&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key0&lt;span style="color:#1f2328">[&lt;/span>index &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+=&lt;/span> key0&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">],&lt;/span> key1&lt;span style="color:#1f2328">[&lt;/span>index &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+=&lt;/span> key1&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>x &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;0&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt0&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key0&lt;span style="color:#1f2328">[&lt;/span>index &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key1&lt;span style="color:#1f2328">[&lt;/span>index &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> res &lt;span style="color:#0550ae">=&lt;/span> INT_MAX&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> s&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">=&lt;/span> min&lt;span style="color:#1f2328">(&lt;/span>res&lt;span style="color:#1f2328">,&lt;/span> key1&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> cnt0 &lt;span style="color:#0550ae">-&lt;/span> key0&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>497-Random Point in Non-overlapping Rectangles</title><link>https://booiris.space/wiki/leetcode/497-random-point-in-non-overlapping-rectangles/</link><pubDate>Fri, 10 Jun 2022 00:24:37 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/497-random-point-in-non-overlapping-rectangles/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出多个在平面上且不相交的多个长方形，要求等概率从这些长方形范围内选出一个点（包含长方形的边），返回点的二维坐标。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>题目中的长方形数量小于100，每个长方形长和宽的长度不大于2000，所以每个长方形最多有 $2000\times2000=4e6$ 个点，总共最多 $4e6\times 100 = 4e8$ 个点。所以首先为每个点编号，然后等概率选取一个点，根据点的编号判断该点在哪个长方形中，然后根据点的编号与长方形左下角点编号的差距计算偏移，然后求出选取点的坐标。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> key&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> maxn &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> rect&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Solution&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>rects&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">:&lt;/span> rect&lt;span style="color:#1f2328">(&lt;/span>rects&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#900;font-weight:bold">x&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> rects&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>maxn&lt;span style="color:#1f2328">);&lt;/span> &lt;span style="color:#57606a">//Give points numbers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> maxn &lt;span style="color:#0550ae">+=&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">*&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> x&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> pick&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> rand&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">%&lt;/span> maxn&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> index &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>index &lt;span style="color:#0550ae">&amp;lt;&lt;/span> key&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> key&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> now&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> &lt;span style="color:#57606a">// get which rectangle the point is in
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> now &lt;span style="color:#0550ae">-=&lt;/span> key&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">];&lt;/span> &lt;span style="color:#57606a">// calculate offset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> &lt;span style="color:#cf222e">int&lt;/span> len &lt;span style="color:#0550ae">=&lt;/span> rect&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">3&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> rect&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>rect&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> now &lt;span style="color:#0550ae">/&lt;/span> len&lt;span style="color:#1f2328">,&lt;/span> rect&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">][&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> now &lt;span style="color:#0550ae">%&lt;/span> len&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Your Solution object will be instantiated and called as such:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Solution* obj = new Solution(rects);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * vector&amp;lt;int&amp;gt; param_1 = obj-&amp;gt;pick();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>one way lcci</title><link>https://booiris.space/wiki/leetcode/one-way-lcci/</link><pubDate>Fri, 13 May 2022 11:05:41 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/one-way-lcci/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出原字符串和目标字符串，有三种操作：&lt;/p>
&lt;ol>
&lt;li>原字符串改变一个字符。&lt;/li>
&lt;li>原字符串删除一个字符。&lt;/li>
&lt;li>原字符串添加一个字符。&lt;/li>
&lt;/ol>
&lt;p>最多可以做一次操作，问能否将原字符串变为目标字符串。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>首先原字符串添加一个字符串相当于目标字符串删除一个字符，所以当原字符串的长度小于目标字符串时交换一下原字符串和目标字符串即可，所以只剩下两种操作需要讨论。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>原字符串改变一个字符：&lt;/p>
&lt;p>首先原字符串和目标字符串长度必须相等，然后遍历一下，如果不同的字符超过一个说明不能改变。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>原字符串删除一个字符：&lt;/p>
&lt;p>遍历字符串，如果不相等就跳过，需要删除这个字符，如果出现两次不同的情况，说明不能改变。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">bool&lt;/span> oneEditAway&lt;span style="color:#1f2328">(&lt;/span>string first&lt;span style="color:#1f2328">,&lt;/span> string second&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>first &lt;span style="color:#0550ae">==&lt;/span> second&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">true&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>abs&lt;span style="color:#1f2328">((&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>first&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>second&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>first&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> second&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> cnt &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> first&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>first&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> second&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">])&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cnt&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>cnt &lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>first&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">&amp;lt;&lt;/span> second&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#1f2328">(&lt;/span>first&lt;span style="color:#1f2328">,&lt;/span> second&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">bool&lt;/span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> second&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> first&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> i &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">true&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>first&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> second&lt;span style="color:#1f2328">[&lt;/span>now&lt;span style="color:#1f2328">])&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>flag&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#6639ba">true&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>449-Serialize and Deserialize BST</title><link>https://booiris.space/wiki/leetcode/449-serialize-and-deserialize-bst/</link><pubDate>Wed, 11 May 2022 17:54:53 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/449-serialize-and-deserialize-bst/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>将一个搜索树序列化为字符串，然后将字符串反序列化为一棵树。&lt;/p>
&lt;p>序列化： 按照自己的规则将一组数据结构用字符串表示。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>没看到是搜索树，直接用层序遍历序列化，记录每一层的节点数据，空节点用特殊字符表示即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Definition for a binary tree node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * struct TreeNode {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * int val;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *left;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *right;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode(int x) : val(x), left(NULL), right(NULL) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Codec&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#57606a">// Encodes a tree to a single string.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> string serialize&lt;span style="color:#1f2328">(&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>root&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>root &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string res &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>pair&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">char&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;N&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> len &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>len&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">auto&lt;/span> qf &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">auto&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> qf&lt;span style="color:#1f2328">.&lt;/span>first&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> qf&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream ss&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> temp &lt;span style="color:#0550ae">+&lt;/span> qf&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;L&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;R&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;%&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;$&amp;#39;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#57606a">// Decodes your encoded data to tree.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#6639ba">deserialize&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>string data&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#57606a">// cout&amp;lt;&amp;lt;data&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> index &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp &lt;span style="color:#0550ae">+=&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream tt&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tt &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> root_v&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tt &lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> root_v&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>root &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#cf222e">new&lt;/span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>root_v&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode &lt;span style="color:#0550ae">*&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>now &lt;span style="color:#0550ae">=&lt;/span> root&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>index &lt;span style="color:#0550ae">&amp;lt;&lt;/span> data&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;$&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;%&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp &lt;span style="color:#0550ae">+=&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now_val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream ss&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> now_val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;L&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#cf222e">new&lt;/span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>now_val&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#cf222e">new&lt;/span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>now_val&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> root&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// Your Codec object will be instantiated and called as such:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// Codec* ser = new Codec();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// Codec* deser = new Codec();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// string tree = ser-&amp;gt;serialize(root);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// TreeNode* ans = deser-&amp;gt;deserialize(tree);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// return ans;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1728-Cat and Mouse II</title><link>https://booiris.space/wiki/leetcode/1728-cat-and-mouse-ii/</link><pubDate>Tue, 10 May 2022 20:54:08 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1728-cat-and-mouse-ii/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>A game is played by a cat and a mouse named Cat and Mouse.&lt;/p>
&lt;p>The environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Players are represented by the characters &amp;lsquo;C&amp;rsquo;(Cat),&amp;lsquo;M&amp;rsquo;(Mouse).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Floors are represented by the character &amp;lsquo;.&amp;rsquo; and can be walked on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Walls are represented by the character &amp;lsquo;#&amp;rsquo; and cannot be walked on.&lt;/p></description></item><item><title>942-DI String Match</title><link>https://booiris.space/wiki/leetcode/942-di-string-match/</link><pubDate>Mon, 09 May 2022 13:28:12 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/942-di-string-match/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出一组字符串，由 &amp;lsquo;D&amp;rsquo; 和 &amp;lsquo;I&amp;rsquo; 组成。这个字符串对应着一个由元素范围为 [0,n] 无重数组的关系：&lt;/p>
&lt;ol>
&lt;li>当 s[i] == &amp;lsquo;I&amp;rsquo;, a[i] &amp;lt; a[i+1]。&lt;/li>
&lt;li>当 s[i] == &amp;lsquo;D&amp;rsquo;, a[i] &amp;gt; a[i+1]。&lt;/li>
&lt;/ol>
&lt;p>举例：&lt;/p>
&lt;p>[3, 2, 0 ,1] 对应的字符串为 &amp;lsquo;DDI&amp;rsquo;。&lt;/p>
&lt;p>给出关系，要求还原任意符合要求的数组。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>贪心地构造数组，设置当前最大值和当前最小值，当前字符为 &amp;lsquo;I&amp;rsquo; 时，插入当前最小值，最小值加1，字符为 &amp;lsquo;D&amp;rsquo; 时类似。 上面过程保证了构造的数组元素关系符合给出的字符串。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> diStringMatch&lt;span style="color:#1f2328">(&lt;/span>string s&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> low &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> high &lt;span style="color:#0550ae">=&lt;/span> s&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#900;font-weight:bold">x&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> s&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>x &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;I&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>emplace_back&lt;span style="color:#1f2328">(&lt;/span>low&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>emplace_back&lt;span style="color:#1f2328">(&lt;/span>high&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>emplace_back&lt;span style="color:#1f2328">(&lt;/span>low&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>442-Find All Duplicates in an Array</title><link>https://booiris.space/wiki/leetcode/442-find-all-duplicates-in-an-array/</link><pubDate>Sun, 08 May 2022 13:46:38 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/442-find-all-duplicates-in-an-array/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出一个长度为 n 的数组，每个数组元素的值为 [1,n], 数组中存在出现一次和出现两次的元素，要求在 $O(n)$ 时间和 $O(1)$ 空间返回出现两次的元素。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> findDuplicates&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>nums&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> nums&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">],&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> nums&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> i&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>433-Minimum Genetic Mutation</title><link>https://booiris.space/wiki/leetcode/433-minimum-genetic-mutation/</link><pubDate>Sat, 07 May 2022 13:23:29 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/433-minimum-genetic-mutation/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出初始字符串、目标字符串和一组中间字符串，有如下规则。&lt;/p>
&lt;ol>
&lt;li>每次改变只能改变字符串中的一位字符。&lt;/li>
&lt;li>改变后的字符串必须在中间字符串中。&lt;/li>
&lt;/ol>
&lt;p>为初始字符串变化为目标字符串所需要的次数。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>根据规则在中间字符串内建图，对于中间字符串内两个不同的字符串 a, b，如果他们相差一位字符，则连上一条双向边。最后以初始字符串作为源点和以目标字符串为汇点建图。&lt;/p>
&lt;p>最后根据建好的图 bfs 一遍即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unordered_map&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> id&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> mp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> p&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">15&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">bool&lt;/span> vis&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">15&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">minMutation&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>string start&lt;span style="color:#1f2328">,&lt;/span> string end&lt;span style="color:#1f2328">,&lt;/span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>bank&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mp &lt;span style="color:#0550ae">=&lt;/span> bank&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> bank&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> i&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> n &lt;span style="color:#0550ae">=&lt;/span> bank&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> bank&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> j &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> j &lt;span style="color:#0550ae">&amp;lt;&lt;/span> bank&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> j&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>i &lt;span style="color:#0550ae">==&lt;/span> j&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> k &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> k &lt;span style="color:#0550ae">&amp;lt;&lt;/span> bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">].&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> k&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>k&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> bank&lt;span style="color:#1f2328">[&lt;/span>j&lt;span style="color:#1f2328">][&lt;/span>k&lt;span style="color:#1f2328">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>flag &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]]].&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>j&lt;span style="color:#1f2328">]]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>j&lt;span style="color:#1f2328">]]].&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> k &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> k &lt;span style="color:#0550ae">&amp;lt;&lt;/span> bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">].&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> k&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>start&lt;span style="color:#1f2328">[&lt;/span>k&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>k&lt;span style="color:#1f2328">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>flag &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">].&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]]].&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> k &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> k &lt;span style="color:#0550ae">&amp;lt;&lt;/span> bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">].&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> k&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>end&lt;span style="color:#1f2328">[&lt;/span>k&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>k&lt;span style="color:#1f2328">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>flag &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#1f2328">[&lt;/span>n&lt;span style="color:#1f2328">].&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p&lt;span style="color:#1f2328">[&lt;/span>id&lt;span style="color:#1f2328">[&lt;/span>bank&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]]].&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>n&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>pair&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vis&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">auto&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#1f2328">.&lt;/span>first &lt;span style="color:#0550ae">==&lt;/span> n&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> now&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> p&lt;span style="color:#1f2328">[&lt;/span>now&lt;span style="color:#1f2328">.&lt;/span>first&lt;span style="color:#1f2328">].&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> nxt &lt;span style="color:#0550ae">=&lt;/span> p&lt;span style="color:#1f2328">[&lt;/span>now&lt;span style="color:#1f2328">.&lt;/span>first&lt;span style="color:#1f2328">][&lt;/span>i&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>vis&lt;span style="color:#1f2328">[&lt;/span>nxt&lt;span style="color:#1f2328">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vis&lt;span style="color:#1f2328">[&lt;/span>nxt&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>nxt&lt;span style="color:#1f2328">,&lt;/span> now&lt;span style="color:#1f2328">.&lt;/span>second &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0550ae">-&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>933-Number of Recent Calls</title><link>https://booiris.space/wiki/leetcode/933-number-of-recent-calls/</link><pubDate>Fri, 06 May 2022 15:52:34 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/933-number-of-recent-calls/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>流式输入时间戳为 t 的请求，对于每一次输入，返回 [t-3000,t] 内请求的个数。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>使用队列维护，将小于 t-3000 的数出队，再将 t 入队，返回当前队列元素个数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">RecentCounter&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RecentCounter&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">ping&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> t&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> low &lt;span style="color:#0550ae">=&lt;/span> t &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">3000&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> low &lt;span style="color:#0550ae">&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>push&lt;span style="color:#1f2328">(&lt;/span>t&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Your RecentCounter object will be instantiated and called as such:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * RecentCounter* obj = new RecentCounter();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * int param_1 = obj-&amp;gt;ping(t);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>713-Subarray Product Less Than K</title><link>https://booiris.space/wiki/leetcode/713-subarray-product-less-than-k/</link><pubDate>Thu, 05 May 2022 10:28:41 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/713-subarray-product-less-than-k/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>求数列字串积小于 k 的字串个数。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>枚举左节点，对于每一个左节点 i，找到满足字串积小于 k 的最长字串的右节点 high，那么每一个左节点有效的字串个数为 high - i +1。&lt;/p>
&lt;p>对于两个左节点 $i , j$。 如果 $i&amp;lt;j$，那么它们的最长右节点一定有 $high_i &amp;lt;= high_j$ 。枚举左节点时 high 是单调递增的，所以时间复杂度为 $O(n)$。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> numSubarrayProductLessThanK&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>nums&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">int&lt;/span> k&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> high &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> n &lt;span style="color:#0550ae">=&lt;/span> nums&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> res &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> n&lt;span style="color:#1f2328">;&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>high &lt;span style="color:#0550ae">&amp;lt;&lt;/span> n &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> now &lt;span style="color:#0550ae">*&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>high&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;&lt;/span> k&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now &lt;span style="color:#0550ae">*=&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>high&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>high &lt;span style="color:#0550ae">&amp;gt;&lt;/span> i&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> high &lt;span style="color:#0550ae">-&lt;/span> i&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now &lt;span style="color:#0550ae">/=&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> now &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> high &lt;span style="color:#0550ae">=&lt;/span> i &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>1823-Find the Winner of the Circular Game</title><link>https://booiris.space/wiki/leetcode/1823-find-the-winner-of-the-circular-game/</link><pubDate>Wed, 04 May 2022 12:19:42 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/1823-find-the-winner-of-the-circular-game/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>约瑟夫环问题，从 1 开始，数 k 个数，最后一个人出去，再接着数，直到剩下最后一个人，求最后一个人对应的位置。&lt;/p>
&lt;p>下面是 5 个人，每次数 2 个的情况。&lt;/p>
&lt;img src="https://s2.loli.net/2022/05/04/mLVdz7vXEb2irPs.png" >
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>对于最后一个人，每次操作与下一次操作差 k， 递归解决即可，注意下标从 1 开始，注意一下边界条件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> findTheWinner&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> n&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">int&lt;/span> k&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>n &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> pre &lt;span style="color:#0550ae">=&lt;/span> findTheWinner&lt;span style="color:#1f2328">(&lt;/span>n &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> k&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> res &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>pre &lt;span style="color:#0550ae">+&lt;/span> k&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">%&lt;/span> n&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0550ae">0&lt;/span> &lt;span style="color:#0550ae">?&lt;/span> &lt;span style="color:#900;font-weight:bold">n&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Solution s&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> s&lt;span style="color:#1f2328">.&lt;/span>findTheWinner&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">5&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#0a3069">\n&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>937-Reorder Data in Log Files</title><link>https://booiris.space/wiki/leetcode/937-reorder-data-in-log-files/</link><pubDate>Tue, 03 May 2022 12:11:57 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/937-reorder-data-in-log-files/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给定字符串数组，按规则对数组进行排序，规则如下：&lt;/p>
&lt;ol>
&lt;li>每个字符串第一个单词为键，后面的为数据，存在两种数据，一种只包含小写字母，一种只包含数字。&lt;/li>
&lt;li>所有小写字母数据在数字数据前面。&lt;/li>
&lt;li>对于小写字母数据，按照字典序进行排序，如果数据相同，按照键的字典序排序。&lt;/li>
&lt;li>对于数字数据，保持顺序和原数组相对顺序相同即可。&lt;/li>
&lt;/ol>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>按照规则模拟即可&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> reorderLogFiles&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>logs&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> dig&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>pair&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#1f2328">,&lt;/span> string&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> word&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> logs&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string key &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>logs&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>now&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#0a3069">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#0550ae">+=&lt;/span> logs&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>now&lt;span style="color:#1f2328">],&lt;/span> now&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>logs&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>now &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> logs&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">][&lt;/span>now &lt;span style="color:#0550ae">+&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dig&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>i&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> word&lt;span style="color:#1f2328">.&lt;/span>emplace_back&lt;span style="color:#1f2328">(&lt;/span>key&lt;span style="color:#1f2328">,&lt;/span> logs&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">].&lt;/span>substr&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#1f2328">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort&lt;span style="color:#1f2328">(&lt;/span>word&lt;span style="color:#1f2328">.&lt;/span>begin&lt;span style="color:#1f2328">(),&lt;/span> word&lt;span style="color:#1f2328">.&lt;/span>end&lt;span style="color:#1f2328">(),&lt;/span> &lt;span style="color:#1f2328">[](&lt;/span>&lt;span style="color:#cf222e">const&lt;/span> &lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>x&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">const&lt;/span> &lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>y&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">.&lt;/span>second &lt;span style="color:#0550ae">==&lt;/span> y&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> x&lt;span style="color:#1f2328">.&lt;/span>first &lt;span style="color:#0550ae">&amp;lt;&lt;/span> y&lt;span style="color:#1f2328">.&lt;/span>first&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> x&lt;span style="color:#1f2328">.&lt;/span>second &lt;span style="color:#0550ae">&amp;lt;&lt;/span> y&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">});&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>string&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#900;font-weight:bold">x&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> word&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>emplace_back&lt;span style="color:#1f2328">(&lt;/span>x&lt;span style="color:#1f2328">.&lt;/span>first &lt;span style="color:#0550ae">+&lt;/span> x&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">auto&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#900;font-weight:bold">x&lt;/span> &lt;span style="color:#1f2328">:&lt;/span> dig&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">((&lt;/span>logs&lt;span style="color:#1f2328">[&lt;/span>x&lt;span style="color:#1f2328">]));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>