<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>原地哈希 on</title><link>https://booiris.space/tags/%E5%8E%9F%E5%9C%B0%E5%93%88%E5%B8%8C/</link><description>Recent content in 原地哈希 on</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Mon, 26 Sep 2022 22:42:10 +0000</lastBuildDate><atom:link href="https://booiris.space/tags/%E5%8E%9F%E5%9C%B0%E5%93%88%E5%B8%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>面试题 17.19. Missing Two LCCI</title><link>https://booiris.space/wiki/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%98-17.19.-missing-two-lcci/</link><pubDate>Mon, 26 Sep 2022 22:42:10 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%98-17.19.-missing-two-lcci/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>You are given an array with all the numbers from 1 to N appearing exactly once, except for two number that is missing. How can you find the missing number in O(N) time and 0(1) space?&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;h3 id="原地哈希">原地哈希&lt;/h3>
&lt;h3 id="数学">数学&lt;/h3>
&lt;h3 id="位运算">位运算&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#![allow(dead_code, unused_imports, unused_macros)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::cmp::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::collections::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">use&lt;/span>&lt;span style="color:#fff"> &lt;/span>std::ops::Bound::&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">struct&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>macro_rules&lt;span style="color:#0550ae">!&lt;/span>&lt;span style="color:#fff"> &lt;/span>hashmap&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$key&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>: &lt;span style="color:#1f2328">expr&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">),&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>::std::collections::HashMap::new&lt;span style="color:#1f2328">();&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$(&lt;/span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#1f2328">.&lt;/span>insert&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#57606a">$key&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#57606a">$val&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>map&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">// impl Solution {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// pub fn missing_two(mut nums: Vec&amp;lt;i32&amp;gt;) -&amp;gt; Vec&amp;lt;i32&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// nums.push(-1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// nums.push(-1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let mut res = vec![];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// for i in 0..nums.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// while nums[i] != -1 &amp;amp;&amp;amp; nums[i] - 1 != i as i32 {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let temp = nums[i] as usize - 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// nums.swap(i, temp);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// for i in 0..nums.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// if nums[i] == -1 {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// res.push(i as i32 + 1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// res
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">// impl Solution {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// pub fn missing_two(nums: Vec&amp;lt;i32&amp;gt;) -&amp;gt; Vec&amp;lt;i32&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let sum = nums.iter().sum::&amp;lt;i32&amp;gt;();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let n = nums.len() as i32 + 2;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let sum_two = n * (n + 1) / 2 - sum;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let key = sum_two / 2;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let sum_low = nums.iter().filter(|&amp;amp;&amp;amp;x| x &amp;lt;= key).sum::&amp;lt;i32&amp;gt;();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// let one = key * (key + 1) / 2 - sum_low;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// // println!(&amp;#34;{} {} {}&amp;#34;, sum_two, sum_low, sum);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// vec![one, sum_two - one]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">impl&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">missing_two&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>nums: &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>&lt;span style="color:#fff"> &lt;/span>-&amp;gt; &lt;span style="color:#6639ba">Vec&lt;/span>&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>nums&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>n&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>len&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">as&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">i32&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">+&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">2&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#0550ae">..=&lt;/span>n&lt;span style="color:#1f2328">).&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#1f2328">);&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>diff&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">-&lt;/span>key&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">let&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">mut&lt;/span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#0550ae">..=&lt;/span>n&lt;span style="color:#1f2328">).&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>diff&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">!=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">});&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>nums&lt;span style="color:#1f2328">.&lt;/span>into_iter&lt;span style="color:#1f2328">().&lt;/span>for_each&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">|&lt;/span>x&lt;span style="color:#0550ae">|&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">if&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">&amp;amp;&lt;/span>&lt;span style="color:#fff"> &lt;/span>diff&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">!=&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^=&lt;/span>&lt;span style="color:#fff"> &lt;/span>x&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">});&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>one&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>key&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#0550ae">^&lt;/span>&lt;span style="color:#fff"> &lt;/span>one&lt;span style="color:#1f2328">]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#57606a">#[cfg(feature = &lt;/span>&lt;span style="color:#0a3069">&amp;#34;local&amp;#34;&lt;/span>&lt;span style="color:#57606a">)]&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#cf222e">pub&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#cf222e">fn&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#1f2328">{&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff"> &lt;/span>&lt;span style="color:#6639ba">println!&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0a3069">&amp;#34;res:&lt;/span>&lt;span style="color:#0a3069">{:?}&lt;/span>&lt;span style="color:#0a3069">&amp;#34;&lt;/span>&lt;span style="color:#1f2328">,&lt;/span>&lt;span style="color:#fff"> &lt;/span>Solution::missing_two&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">vec!&lt;/span>&lt;span style="color:#1f2328">[&lt;/span>&lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]));&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fff">&lt;/span>&lt;span style="color:#1f2328">}&lt;/span>&lt;span style="color:#fff">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>442-Find All Duplicates in an Array</title><link>https://booiris.space/wiki/leetcode/442-find-all-duplicates-in-an-array/</link><pubDate>Sun, 08 May 2022 13:46:38 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/442-find-all-duplicates-in-an-array/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>给出一个长度为 n 的数组，每个数组元素的值为 [1,n], 数组中存在出现一次和出现两次的元素，要求在 $O(n)$ 时间和 $O(1)$ 空间返回出现两次的元素。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Solution&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> findDuplicates&lt;span style="color:#1f2328">(&lt;/span>vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&lt;/span>nums&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#0550ae">&amp;lt;&lt;/span>&lt;span style="color:#cf222e">int&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> nums&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap&lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">],&lt;/span> nums&lt;span style="color:#1f2328">[&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">for&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> i &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span> i &lt;span style="color:#0550ae">&amp;lt;&lt;/span> nums&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span> i&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> i&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res&lt;span style="color:#1f2328">.&lt;/span>push_back&lt;span style="color:#1f2328">(&lt;/span>nums&lt;span style="color:#1f2328">[&lt;/span>i&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">-&lt;/span> &lt;span style="color:#0550ae">1&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>