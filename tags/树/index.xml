<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>树 on</title><link>https://booiris.space/tags/%E6%A0%91/</link><description>Recent content in 树 on</description><generator>Hugo</generator><language>cn</language><lastBuildDate>Wed, 11 May 2022 17:54:53 +0000</lastBuildDate><atom:link href="https://booiris.space/tags/%E6%A0%91/index.xml" rel="self" type="application/rss+xml"/><item><title>449-Serialize and Deserialize BST</title><link>https://booiris.space/wiki/leetcode/449-serialize-and-deserialize-bst/</link><pubDate>Wed, 11 May 2022 17:54:53 +0000</pubDate><guid>https://booiris.space/wiki/leetcode/449-serialize-and-deserialize-bst/</guid><description>&lt;h2 id="题意">题意&lt;/h2>
&lt;p>将一个搜索树序列化为字符串，然后将字符串反序列化为一棵树。&lt;/p>
&lt;p>序列化： 按照自己的规则将一组数据结构用字符串表示。&lt;/p>
&lt;h2 id="题解">题解&lt;/h2>
&lt;p>没看到是搜索树，直接用层序遍历序列化，记录每一层的节点数据，空节点用特殊字符表示即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#include&lt;/span> &lt;span style="color:#57606a">&amp;lt;bits/stdc++.h&amp;gt;&lt;/span>&lt;span style="color:#57606a">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">using&lt;/span> &lt;span style="color:#cf222e">namespace&lt;/span> std&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#define INF 0x3f3f3f3f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">typedef&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> &lt;span style="color:#cf222e">long&lt;/span> ll&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * Definition for a binary tree node.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * struct TreeNode {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * int val;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *left;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode *right;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * TreeNode(int x) : val(x), left(NULL), right(NULL) {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> * };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cf222e">class&lt;/span> &lt;span style="color:#1f2328">Codec&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">public&lt;/span>&lt;span style="color:#0550ae">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#57606a">// Encodes a tree to a single string.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> string serialize&lt;span style="color:#1f2328">(&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>root&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>root &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string res &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>pair&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#cf222e">char&lt;/span>&lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;N&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> len &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>len&lt;span style="color:#0550ae">--&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">auto&lt;/span> qf &lt;span style="color:#0550ae">=&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">auto&lt;/span> now &lt;span style="color:#0550ae">=&lt;/span> qf&lt;span style="color:#1f2328">.&lt;/span>first&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> qf&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream ss&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> temp &lt;span style="color:#0550ae">+&lt;/span> qf&lt;span style="color:#1f2328">.&lt;/span>second&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;L&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>now&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;R&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">,&lt;/span> &lt;span style="color:#0a3069">&amp;#39;%&amp;#39;&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#0550ae">+=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;$&amp;#39;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> res&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#57606a">// Decodes your encoded data to tree.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>&lt;span style="color:#6639ba">deserialize&lt;/span>&lt;span style="color:#1f2328">(&lt;/span>string data&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#57606a">// cout&amp;lt;&amp;lt;data&amp;lt;&amp;lt;&amp;#34;\n&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> index &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp &lt;span style="color:#0550ae">+=&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream tt&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tt &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> root_v&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tt &lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> root_v&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>root &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#cf222e">new&lt;/span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>root_v&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#0550ae">&amp;lt;&lt;/span>TreeNode &lt;span style="color:#0550ae">*&amp;gt;&lt;/span> q&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>root&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TreeNode &lt;span style="color:#0550ae">*&lt;/span>now &lt;span style="color:#0550ae">=&lt;/span> root&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>index &lt;span style="color:#0550ae">&amp;lt;&lt;/span> data&lt;span style="color:#1f2328">.&lt;/span>size&lt;span style="color:#1f2328">())&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;$&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">!&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>empty&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#0550ae">!=&lt;/span> &lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#cf222e">nullptr&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;%&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">continue&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#0a3069">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">while&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;gt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#0550ae">&amp;amp;&amp;amp;&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">&amp;lt;=&lt;/span> &lt;span style="color:#0a3069">&amp;#39;9&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> temp &lt;span style="color:#0550ae">+=&lt;/span> data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">int&lt;/span> now_val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream ss&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;lt;&amp;lt;&lt;/span> temp&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#0550ae">&amp;gt;&amp;gt;&lt;/span> now_val&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">if&lt;/span> &lt;span style="color:#1f2328">(&lt;/span>data&lt;span style="color:#1f2328">[&lt;/span>index&lt;span style="color:#1f2328">]&lt;/span> &lt;span style="color:#0550ae">==&lt;/span> &lt;span style="color:#0a3069">&amp;#39;L&amp;#39;&lt;/span>&lt;span style="color:#1f2328">)&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#cf222e">new&lt;/span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>now_val&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>left&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span> &lt;span style="color:#cf222e">else&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right &lt;span style="color:#0550ae">=&lt;/span> &lt;span style="color:#cf222e">new&lt;/span> TreeNode&lt;span style="color:#1f2328">(&lt;/span>now_val&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>emplace&lt;span style="color:#1f2328">(&lt;/span>q&lt;span style="color:#1f2328">.&lt;/span>front&lt;span style="color:#1f2328">()&lt;/span>&lt;span style="color:#0550ae">-&amp;gt;&lt;/span>right&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q&lt;span style="color:#1f2328">.&lt;/span>pop&lt;span style="color:#1f2328">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index&lt;span style="color:#0550ae">++&lt;/span>&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cf222e">return&lt;/span> root&lt;span style="color:#1f2328">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// Your Codec object will be instantiated and called as such:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// Codec* ser = new Codec();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// Codec* deser = new Codec();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// string tree = ser-&amp;gt;serialize(root);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// TreeNode* ans = deser-&amp;gt;deserialize(tree);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">// return ans;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#57606a">#ifdef LOCAL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">&lt;/span>&lt;span style="color:#cf222e">int&lt;/span> &lt;span style="color:#6639ba">main&lt;/span>&lt;span style="color:#1f2328">()&lt;/span> &lt;span style="color:#1f2328">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios&lt;span style="color:#0550ae">::&lt;/span>sync_with_stdio&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#6639ba">false&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin&lt;span style="color:#1f2328">.&lt;/span>tie&lt;span style="color:#1f2328">(&lt;/span>&lt;span style="color:#0550ae">0&lt;/span>&lt;span style="color:#1f2328">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#1f2328">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#57606a">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>